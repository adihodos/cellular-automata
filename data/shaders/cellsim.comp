#version 460 core

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout (location = 0) uniform uint TILES;

layout (binding = 1) uniform CellEvalRule {
  uint live_n[32];
  uint birth_n[32];
  uint liveCount;
  uint birthCount;
  uint states;
  uint nRules;
} evalRule;

const uint EVAL_NEIGHBOR_MOORE = 0;
const uint EVAL_NEIGHBOR_VN = 1;

const ivec3 MOORE_NEIGHBOURS[] = ivec3[32](
  ivec3(-1, -1, -1),
  ivec3(0, -1, -1),
  ivec3(1, -1, -1),
  ivec3(-1, 0, -1),
  ivec3(0, 0, -1),
  ivec3(1, 0, -1),
  ivec3(-1, 1, -1),
  ivec3(0, 1, -1),
  ivec3(1, 1, -1),
  ivec3(-1, -1, 0),
  ivec3(0, -1, 0),
  ivec3(1, -1, 0),
  ivec3(-1, 0, 0),
  ivec3(1, 0, 0),
  ivec3(-1, 1, 0),
  ivec3(0, 1, 0),
  ivec3(1, 1, 0),
  ivec3(-1, -1, 1),
  ivec3(0, -1, 1),
  ivec3(1, -1, 1),
  ivec3(-1, 0, 1),
  ivec3(0, 0, 1),
  ivec3(1, 0, 1),
  ivec3(-1, 1, 1),
  ivec3(0, 1, 1),
  ivec3(1, 1, 1),

  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0));

const ivec3 VN_NEIGHBOURS[] = ivec3[32](
  ivec3(-1, 0, 0),
  ivec3(1, 0, 0),
  ivec3(0, -1, 0),
  ivec3(0, 1, 0),
  ivec3(0, 0, -1),
  ivec3(0, 0, 1),

  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0),
  ivec3(0, 0, 0));

struct DrawElementsIndirectCommand {
  uint  count;
  uint  instance_count;
  uint  first_index;
  uint  base_vertex;
  uint  base_instance;
};

layout (binding = 0) writeonly buffer DrawIndirectCommand {
  DrawElementsIndirectCommand cmds[];
} draw_indirect;

struct CellState {
  vec3 center;
  uint state;
};

layout (std430, binding = 1) buffer CellsCurrentState {
  CellState data[];
} ccs;

layout (std430, binding = 2) buffer CellsNextState {
  CellState data[];
} cns;

layout (std430, binding = 3) writeonly buffer RenderedCellsIndices {
  uint cellData[];
} rcells_idx;

mat4 BuildTranslation(vec3 delta)
{
    return mat4(
        vec4(1.0, 0.0, 0.0, 0.0),
        vec4(0.0, 1.0, 0.0, 0.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        vec4(delta, 1.0));
}

uint flattenIndex(const uvec3 idx) {
  const uvec2 size = (gl_NumWorkGroups * gl_WorkGroupSize).xy;
  return idx.z * size.x * size.y + idx.y * size.x + idx.x;
}

uint computeLiveNeighbours(const ivec3 cellIndices[32], const uint indicesCount, const ivec3 cell, const uvec2 gridSize) {
  uint liveNeighbours = 0;
  for (uint i = 0; i < indicesCount; ++i) {
    const uvec3 nxyz = uvec3(mod(cell + ivec3(TILES) + cellIndices[i], ivec3(TILES)));
    // flatten index
    const uint idx = flattenIndex(nxyz);
    liveNeighbours += uint((ccs.data[idx].state & 0xFF) == 1);
  }

  return liveNeighbours;
}

bool canCellComeToLife(const uint aliveNeighbours) {
  uint result = 0;
  for (uint i = 0; i < evalRule.birthCount; ++i) {
    result |= uint(evalRule.birth_n[i] == aliveNeighbours);
  }

  return result != 0;
}

bool canCellSurvive(const uint aliveNeighbours) {
  uint result = 0;
  for (uint i = 0; i < evalRule.liveCount; ++i) {
    result |= uint(evalRule.live_n[i] == aliveNeighbours);
  }

  return result != 0;
}

uint packCellData(uint x, uint y, uint z, uint state) {
  return x | (y << 8) | (z << 16) | (state << 24);
}

void main() {
  const uint cellIdx = flattenIndex(gl_GlobalInvocationID);

  const uint cellLiveNeighbours = computeLiveNeighbours(
    evalRule.nRules == EVAL_NEIGHBOR_MOORE ? MOORE_NEIGHBOURS : VN_NEIGHBOURS,
    evalRule.nRules == EVAL_NEIGHBOR_MOORE ? 26 : 6,
    ivec3(gl_GlobalInvocationID), (gl_NumWorkGroups * gl_WorkGroupSize).xy);

  // const uint comesAlive = canCellComeToLife(cellLiveNeighbours) ? 1 << 16 : 0;
  // const uint canSurvive = canCellSurvive(cellLiveNeighbours) ? 1 << 24 : 0; 
  
  uint cellState = ccs.data[cellIdx].state;
  // (ccs.data[cellIdx].state & 0xFF) | (cellLiveNeighbours << 8) | comesAlive | canSurvive;

  if (cellState == 0) {
    cellState |= uint(canCellComeToLife(cellLiveNeighbours));
  } else if (cellState == 1) {
    cellState += uint(!canCellSurvive(cellLiveNeighbours));
  } else {
    if (cellState == evalRule.states - 1) {
      cellState = 0;
    } else {
      cellState += 1;
    }
  }

  cns.data[cellIdx].state = cellState;

  if (cellState != 0) {
    const uint idx = atomicAdd(draw_indirect.cmds[0].instance_count, 1) + 1;
    rcells_idx.cellData[idx] = packCellData(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z, cellState);
  }
}
